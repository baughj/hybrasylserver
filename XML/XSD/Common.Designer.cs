// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.0.0.47. www.xsd2code.com
//    <NameSpace>Hybrasyl.Xml.Common</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>NetCore</CodeBaseTag><InitializeFields>AllExceptOptional</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>False</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>False</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Hybrasyl.Xml.Common
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;


    [DebuggerStepThrough]
    public partial class SimpleQuantity
    {
        #region Private fields
        private string _min;
        private string _max;
        private string _value;
        #endregion

        public SimpleQuantity()
        {
            _min = "0";
            _max = "0";
        }

        [DefaultValue("0")]
        public string Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }

        [DefaultValue("0")]
        public string Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }

        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }

    [DebuggerStepThrough]
    public partial class StatModifiers
    {
        #region Private fields
        private sbyte _str;
        private sbyte _int;
        private sbyte _wis;
        private sbyte _con;
        private sbyte _dex;
        private int _hp;
        private int _mp;
        private sbyte _hit;
        private sbyte _dmg;
        private sbyte _ac;
        private sbyte _regen;
        private sbyte _mr;
        private Element _offensiveElement;
        private Element _defensiveElement;
        private float _damageModifier;
        private float _healModifier;
        private DamageType _damageType;
        private float _reflectChance;
        private float _reflectIntensity;
        #endregion

        public StatModifiers()
        {
            _str = ((sbyte)(0));
            _int = ((sbyte)(0));
            _wis = ((sbyte)(0));
            _con = ((sbyte)(0));
            _dex = ((sbyte)(0));
            _hp = 0;
            _mp = 0;
            _hit = ((sbyte)(0));
            _dmg = ((sbyte)(0));
            _ac = ((sbyte)(0));
            _regen = ((sbyte)(0));
            _mr = ((sbyte)(0));
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Str
        {
            get
            {
                return _str;
            }
            set
            {
                _str = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Int
        {
            get
            {
                return _int;
            }
            set
            {
                _int = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Wis
        {
            get
            {
                return _wis;
            }
            set
            {
                _wis = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Con
        {
            get
            {
                return _con;
            }
            set
            {
                _con = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Dex
        {
            get
            {
                return _dex;
            }
            set
            {
                _dex = value;
            }
        }

        [DefaultValue(0)]
        public int Hp
        {
            get
            {
                return _hp;
            }
            set
            {
                _hp = value;
            }
        }

        [DefaultValue(0)]
        public int Mp
        {
            get
            {
                return _mp;
            }
            set
            {
                _mp = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Hit
        {
            get
            {
                return _hit;
            }
            set
            {
                _hit = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Dmg
        {
            get
            {
                return _dmg;
            }
            set
            {
                _dmg = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Ac
        {
            get
            {
                return _ac;
            }
            set
            {
                _ac = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Regen
        {
            get
            {
                return _regen;
            }
            set
            {
                _regen = value;
            }
        }

        [DefaultValue(typeof(sbyte), "0")]
        public sbyte Mr
        {
            get
            {
                return _mr;
            }
            set
            {
                _mr = value;
            }
        }

        public Element OffensiveElement
        {
            get
            {
                return _offensiveElement;
            }
            set
            {
                _offensiveElement = value;
            }
        }

        public Element DefensiveElement
        {
            get
            {
                return _defensiveElement;
            }
            set
            {
                _defensiveElement = value;
            }
        }

        public float DamageModifier
        {
            get
            {
                return _damageModifier;
            }
            set
            {
                _damageModifier = value;
            }
        }

        public float HealModifier
        {
            get
            {
                return _healModifier;
            }
            set
            {
                _healModifier = value;
            }
        }

        public DamageType DamageType
        {
            get
            {
                return _damageType;
            }
            set
            {
                _damageType = value;
            }
        }

        public float ReflectChance
        {
            get
            {
                return _reflectChance;
            }
            set
            {
                _reflectChance = value;
            }
        }

        public float ReflectIntensity
        {
            get
            {
                return _reflectIntensity;
            }
            set
            {
                _reflectIntensity = value;
            }
        }
    }

    public enum Element
    {
        None,
        Fire,
        Water,
        Wind,
        Earth,
        Light,
        Dark,
        Wood,
        Metal,
        Undead,
        Random,
    }

    public enum DamageType
    {
        Direct,
        Physical,
        Magical,
        Elemental,
    }

    [DebuggerStepThrough]
    public partial class WarpRestrictions
    {
        #region Private fields
        private WarpRestrictionsLevel _level;
        private WarpRestrictionsAB _ab;
        private bool _noMobUse;
        #endregion

        public WarpRestrictionsLevel Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }

        public WarpRestrictionsAB Ab
        {
            get
            {
                return _ab;
            }
            set
            {
                _ab = value;
            }
        }

        public bool NoMobUse
        {
            get
            {
                return _noMobUse;
            }
            set
            {
                _noMobUse = value;
            }
        }
    }

    [DebuggerStepThrough]
    public partial class WarpRestrictionsLevel
    {
        #region Private fields
        private byte _min;
        private byte _max;
        #endregion

        public WarpRestrictionsLevel()
        {
            _min = ((byte)(0));
            _max = ((byte)(255));
        }

        [DefaultValue(typeof(byte), "0")]
        public byte Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }

        [DefaultValue(typeof(byte), "255")]
        public byte Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    }

    [DebuggerStepThrough]
    public partial class WarpRestrictionsAB
    {
        #region Private fields
        private byte _min;
        private byte _max;
        #endregion

        public WarpRestrictionsAB()
        {
            _min = ((byte)(0));
            _max = ((byte)(255));
        }

        [DefaultValue(typeof(byte), "0")]
        public byte Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }

        [DefaultValue(typeof(byte), "255")]
        public byte Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    }

    [System.FlagsAttribute()]
    public enum DamageFlags
    {
        None = 1,
        Scaled = 2,
        Resistance = 4,
        Threat = 8,
        Nonlethal = 16,
    }

    public enum SpellUseType
    {
        Unusable,
        Prompt,
        Target,
        FourDigit,
        ThreeDigit,
        NoTarget,
        TwoDigit,
        Onedigit,
    }

    public enum IntentTarget
    {
        Hostile,
        Friendly,
        Pvp,
        Group,
    }

    public enum IntentDirection
    {
        None,
        Front,
        Back,
        Left,
        Right,
        Nearby,
    }

    public enum ItemColor
    {
        None,
        Black,
        Red,
        Orange,
        Yellow,
        Teal,
        Blue,
        Purple,
        DarkGreen,
        Green,
        LightOrange,
        Brown,
        Grey,
        DarkBlue,
        Tan,
        White,
    }

    public enum ItemBodyStyle
    {
        Transparent,
        Male,
        MaleBlack,
        MaleRed,
        Female,
    }

    [System.FlagsAttribute()]
    public enum ItemFlags
    {
        Bound = 1,
        Depositable = 2,
        Enchantable = 4,
        Consecratable = 8,
        Tailorable = 16,
        Smithable = 32,
        Exchangeable = 64,
        Vendorable = 128,
        Perishable = 256,
        Unique = 512,
        Master = 1024,
        [XmlEnumAttribute("Unique-Equipped")]
        UniqueEquipped = 2048,
    }

    [System.FlagsAttribute()]
    public enum CreatureCondition
    {
        Freeze = 1,
        Sleep = 2,
        Paralyze = 4,
        Blind = 8,
        Coma = 16,
        Poison = 32,
        Mist = 64,
        Regen = 128,
        Sight = 256,
        Invisible = 512,
        Mute = 1024,
        ReflectPhysical = 2048,
        ReflectMagical = 4096,
        Invulnerable = 8192,
        Charm = 16384,
        IncreaseDamage = 32768,
        ReduceDamage = 65536,
        AbsorbSpell = 131072,
        ProhibitItemUse = 262144,
        ProhibitEquipChange = 524288,
        ProhibitSpeech = 1048576,
        ProhibitWhisper = 2097152,
        ProhibitShout = 4194304,
    }

    public enum Class
    {
        Peasant,
        Warrior,
        Rogue,
        Wizard,
        Priest,
        Monk,
    }

    public enum Gender
    {
        Neutral,
        Male,
        Female,
    }

    public enum IntentType
    {
        Hostile,
        Passive,
        Neutral,
    }

    public enum WeaponType
    {
        OneHand,
        TwoHand,
        Dagger,
        Staff,
        Claw,
        None,
    }

    public enum EquipmentSlot
    {
        None,
        Weapon,
        Armor,
        Shield,
        Helmet,
        Earring,
        Necklace,
        LeftHand,
        RightHand,
        LeftArm,
        RightArm,
        Waist,
        Leg,
        Foot,
        FirstAcc,
        Trousers,
        Coat,
        SecondAcc,
        ThirdAcc,
        Gauntlet,
        Ring,
    }

    public enum Direction
    {
        North,
        East,
        South,
        West,
    }

    [System.FlagsAttribute()]
    public enum MapFlags
    {
        Snow = 1,
        Rain = 2,
        Dark = 4,
        NoMap = 8,
        Winter = 16,
    }

    [System.FlagsAttribute()]
    public enum NpcJobList
    {
        Vend = 1,
        Bank = 2,
        Train = 4,
        Repair = 8,
        Post = 16,
    }

    public enum NpcRepairType
    {
        Armor,
        Weapon,
        All,
    }
}
#pragma warning restore
