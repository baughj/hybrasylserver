// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>Hybrasyl.XML</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>True</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>True</ValidateProperty><ClassNamePrefix>Xml</ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Hybrasyl.XML
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("map", Namespace = "http://www.hybrasyl.com/XML/Maps", IsNullable = false)]
    public partial class XmlMap
    {

        private bool _shouldSerializeId;

        private bool _shouldSerializeFlags;

        private string _name;

        private string _description;

        private System.Nullable<MapFlags> _flags;

        private List<XmlWarp> _warps;

        private List<XmlReactor> _reactors;

        private List<XmlNpc> _npcs;

        private List<XmlSpawn> _spawns;

        private XmlSignposts _signposts;

        private ushort _id;

        private byte _music;

        private byte _x;

        private byte _y;

        private static XmlSerializer serializer;

        public XmlMap()
        {
            this._signposts = new XmlSignposts();
            this._spawns = new List<XmlSpawn>();
            this._npcs = new List<XmlNpc>();
            this._reactors = new List<XmlReactor>();
            this._warps = new List<XmlWarp>();
            this._music = ((byte)(0));
        }

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Name";
                Validator.ValidateProperty(value, validatorPropContext);
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(65534, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("flags")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(5)]
        public MapFlags Flags
        {
            get
            {
                if (this._flags.HasValue)
                {
                    return this._flags.Value;
                }
                else
                {
                    return default(MapFlags);
                }
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Flags";
                Validator.ValidateProperty(value, validatorPropContext);
                this._flags = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlagsSpecified
        {
            get
            {
                return this._flags.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._flags = null;
                }
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("warp", IsNullable = false, ElementName = "warps")]
        public List<XmlWarp> Warps
        {
            get
            {
                return this._warps;
            }
            set
            {
                this._warps = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("reactor", IsNullable = false, ElementName = "reactors")]
        public List<XmlReactor> Reactors
        {
            get
            {
                return this._reactors;
            }
            set
            {
                this._reactors = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("npc", IsNullable = false, ElementName = "npcs")]
        public List<XmlNpc> Npcs
        {
            get
            {
                return this._npcs;
            }
            set
            {
                this._npcs = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("spawn", IsNullable = false, ElementName = "spawns")]
        public List<XmlSpawn> Spawns
        {
            get
            {
                return this._spawns;
            }
            set
            {
                this._spawns = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("signposts")]
        public XmlSignposts Signposts
        {
            get
            {
                return this._signposts;
            }
            set
            {
                this._signposts = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "id")]
        public ushort Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
                _shouldSerializeId = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "music")]
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "0")]
        public byte Music
        {
            get
            {
                return this._music;
            }
            set
            {
                this._music = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlMap));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Warps should be serialized
        /// </summary>
        public virtual bool ShouldSerializeWarps()
        {
            return Warps != null && Warps.Count > 0;
        }

        /// <summary>
        /// Test whether Reactors should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReactors()
        {
            return Reactors != null && Reactors.Count > 0;
        }

        /// <summary>
        /// Test whether Npcs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNpcs()
        {
            return Npcs != null && Npcs.Count > 0;
        }

        /// <summary>
        /// Test whether Spawns should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpawns()
        {
            return Spawns != null && Spawns.Count > 0;
        }

        /// <summary>
        /// Test whether Flags should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFlags()
        {
            if (_shouldSerializeFlags)
            {
                return true;
            }
            return (_flags != default(MapFlags));
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            if (_shouldSerializeId)
            {
                return true;
            }
            return (_id != default(ushort));
        }

        /// <summary>
        /// Test whether Signposts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSignposts()
        {
            return (_signposts != null);
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlMap object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlMap object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlMap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlMap);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlMap obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlMap Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlMap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlMap Deserialize(System.IO.Stream s)
        {
            return ((XmlMap)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlMap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlMap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlMap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlMap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlMap obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlMap LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/HybrasylCommon")]
    [System.Xml.Serialization.XmlRootAttribute("MapFlags")]
    public enum MapFlags
    {

        /// <remarks/>
        snow = 1,

        /// <remarks/>
        rain = 2,

        /// <remarks/>
        dark = 4,

        /// <remarks/>
        nomap = 8,

        /// <remarks/>
        winter = 16,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Warp")]
    public partial class XmlWarp
    {

        private bool _shouldSerializeItem;

        private string _description;

        private object _item;

        private XmlWarpRestrictions _restrictions;

        private byte _x;

        private byte _y;

        private static XmlSerializer serializer;

        public XmlWarp()
        {
            this._restrictions = new XmlWarpRestrictions();
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("maptarget", typeof(XmlWarpMaptarget))]
        [System.Xml.Serialization.XmlElementAttribute("worldmaptarget", typeof(string))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
                _shouldSerializeItem = true;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("restrictions")]
        public XmlWarpRestrictions Restrictions
        {
            get
            {
                return this._restrictions;
            }
            set
            {
                this._restrictions = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWarp));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }

        /// <summary>
        /// Test whether Restrictions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRestrictions()
        {
            return (_restrictions != null);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWarp object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWarp object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWarp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWarp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarp);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWarp obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWarp Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWarp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWarp Deserialize(System.IO.Stream s)
        {
            return ((XmlWarp)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWarp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWarp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWarp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWarp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWarp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWarp LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("WarpMaptarget")]
    public partial class XmlWarpMaptarget
    {

        private byte _x;

        private byte _y;

        private string _value;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWarpMaptarget));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            return !string.IsNullOrEmpty(Value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWarpMaptarget object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWarpMaptarget object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWarpMaptarget object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWarpMaptarget obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpMaptarget);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWarpMaptarget obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWarpMaptarget Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWarpMaptarget)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWarpMaptarget Deserialize(System.IO.Stream s)
        {
            return ((XmlWarpMaptarget)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWarpMaptarget object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWarpMaptarget object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWarpMaptarget object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWarpMaptarget obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpMaptarget);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWarpMaptarget obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWarpMaptarget LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("worldmap", Namespace = "http://www.hybrasyl.com/XML/Maps", IsNullable = false)]
    public partial class XmlWorldMap
    {

        private string _name;

        private string _description;

        private XmlWorldMapPoints _points;

        private string _clientmap;

        private static XmlSerializer serializer;

        public XmlWorldMap()
        {
            this._points = new XmlWorldMapPoints();
        }

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Name";
                Validator.ValidateProperty(value, validatorPropContext);
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(65534, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("points")]
        public XmlWorldMapPoints Points
        {
            get
            {
                return this._points;
            }
            set
            {
                this._points = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "clientmap")]
        public string Clientmap
        {
            get
            {
                return this._clientmap;
            }
            set
            {
                this._clientmap = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWorldMap));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Points should be serialized
        /// </summary>
        public virtual bool ShouldSerializePoints()
        {
            return (_points != null);
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Clientmap should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClientmap()
        {
            return !string.IsNullOrEmpty(Clientmap);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWorldMap object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWorldMap object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWorldMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWorldMap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMap);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWorldMap obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWorldMap Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWorldMap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWorldMap Deserialize(System.IO.Stream s)
        {
            return ((XmlWorldMap)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWorldMap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWorldMap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWorldMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWorldMap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWorldMap obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWorldMap LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("WorldMapPoints")]
    public partial class XmlWorldMapPoints
    {

        private List<XmlWorldMapPoint> _point;

        private XmlWarpRestrictions _restrictions;

        private static XmlSerializer serializer;

        public XmlWorldMapPoints()
        {
            this._restrictions = new XmlWarpRestrictions();
            this._point = new List<XmlWorldMapPoint>();
        }

        [System.Xml.Serialization.XmlElementAttribute("point", ElementName = "point")]
        public List<XmlWorldMapPoint> Point
        {
            get
            {
                return this._point;
            }
            set
            {
                this._point = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("restrictions")]
        public XmlWarpRestrictions Restrictions
        {
            get
            {
                return this._restrictions;
            }
            set
            {
                this._restrictions = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWorldMapPoints));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Point should be serialized
        /// </summary>
        public virtual bool ShouldSerializePoint()
        {
            return Point != null && Point.Count > 0;
        }

        /// <summary>
        /// Test whether Restrictions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRestrictions()
        {
            return (_restrictions != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWorldMapPoints object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWorldMapPoints object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWorldMapPoints object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWorldMapPoints obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMapPoints);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWorldMapPoints obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWorldMapPoints Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWorldMapPoints)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWorldMapPoints Deserialize(System.IO.Stream s)
        {
            return ((XmlWorldMapPoints)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWorldMapPoints object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWorldMapPoints object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWorldMapPoints object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWorldMapPoints obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMapPoints);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWorldMapPoints obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWorldMapPoints LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("WorldMapPoint")]
    public partial class XmlWorldMapPoint
    {

        private bool _shouldSerializeY;

        private bool _shouldSerializeX;

        private string _description;

        private string _name;

        private XmlWorldMapPointTarget _target;

        private XmlWarpRestrictions _restrictions;

        private ushort _x;

        private ushort _y;

        private static XmlSerializer serializer;

        public XmlWorldMapPoint()
        {
            this._restrictions = new XmlWarpRestrictions();
            this._target = new XmlWorldMapPointTarget();
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Name";
                Validator.ValidateProperty(value, validatorPropContext);
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("target")]
        public XmlWorldMapPointTarget Target
        {
            get
            {
                return this._target;
            }
            set
            {
                this._target = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("restrictions")]
        public XmlWarpRestrictions Restrictions
        {
            get
            {
                return this._restrictions;
            }
            set
            {
                this._restrictions = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public ushort X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
                _shouldSerializeX = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public ushort Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
                _shouldSerializeY = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWorldMapPoint));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(ushort));
        }

        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(ushort));
        }

        /// <summary>
        /// Test whether Target should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTarget()
        {
            return (_target != null);
        }

        /// <summary>
        /// Test whether Restrictions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRestrictions()
        {
            return (_restrictions != null);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWorldMapPoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWorldMapPoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWorldMapPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWorldMapPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMapPoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWorldMapPoint obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWorldMapPoint Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWorldMapPoint)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWorldMapPoint Deserialize(System.IO.Stream s)
        {
            return ((XmlWorldMapPoint)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWorldMapPoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWorldMapPoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWorldMapPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWorldMapPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMapPoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWorldMapPoint obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWorldMapPoint LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("WorldMapPointTarget")]
    public partial class XmlWorldMapPointTarget
    {

        private byte _x;

        private byte _y;

        private string _value;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWorldMapPointTarget));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            return !string.IsNullOrEmpty(Value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWorldMapPointTarget object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWorldMapPointTarget object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWorldMapPointTarget object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWorldMapPointTarget obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMapPointTarget);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWorldMapPointTarget obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWorldMapPointTarget Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWorldMapPointTarget)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWorldMapPointTarget Deserialize(System.IO.Stream s)
        {
            return ((XmlWorldMapPointTarget)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWorldMapPointTarget object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWorldMapPointTarget object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWorldMapPointTarget object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWorldMapPointTarget obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWorldMapPointTarget);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWorldMapPointTarget obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWorldMapPointTarget LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/HybrasylCommon")]
    [System.Xml.Serialization.XmlRootAttribute("WarpRestrictions")]
    public partial class XmlWarpRestrictions
    {

        private bool _shouldSerializeNoMobUse;

        private XmlWarpRestrictionsLevel _level;

        private XmlWarpRestrictionsAB _ab;

        private object _noMobUse;

        private static XmlSerializer serializer;

        public XmlWarpRestrictions()
        {
            this._ab = new XmlWarpRestrictionsAB();
            this._level = new XmlWarpRestrictionsLevel();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, ElementName = "level")]
        public XmlWarpRestrictionsLevel Level
        {
            get
            {
                return this._level;
            }
            set
            {
                this._level = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, ElementName = "ab")]
        public XmlWarpRestrictionsAB Ab
        {
            get
            {
                return this._ab;
            }
            set
            {
                this._ab = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, ElementName = "noMobUse")]
        public object NoMobUse
        {
            get
            {
                return this._noMobUse;
            }
            set
            {
                this._noMobUse = value;
                _shouldSerializeNoMobUse = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWarpRestrictions));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether NoMobUse should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNoMobUse()
        {
            if (_shouldSerializeNoMobUse)
            {
                return true;
            }
            return (_noMobUse != default(object));
        }

        /// <summary>
        /// Test whether Level should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLevel()
        {
            return (_level != null);
        }

        /// <summary>
        /// Test whether Ab should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAb()
        {
            return (_ab != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWarpRestrictions object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWarpRestrictions object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWarpRestrictions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWarpRestrictions obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpRestrictions);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWarpRestrictions obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWarpRestrictions Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWarpRestrictions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWarpRestrictions Deserialize(System.IO.Stream s)
        {
            return ((XmlWarpRestrictions)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWarpRestrictions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWarpRestrictions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWarpRestrictions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWarpRestrictions obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpRestrictions);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWarpRestrictions obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWarpRestrictions LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/HybrasylCommon")]
    [System.Xml.Serialization.XmlRootAttribute("WarpRestrictionsLevel")]
    public partial class XmlWarpRestrictionsLevel
    {

        private byte _min;

        private byte _max;

        private static XmlSerializer serializer;

        public XmlWarpRestrictionsLevel()
        {
            this._min = ((byte)(0));
            this._max = ((byte)(255));
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "min")]
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "0")]
        public byte Min
        {
            get
            {
                return this._min;
            }
            set
            {
                this._min = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "max")]
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "255")]
        public byte Max
        {
            get
            {
                return this._max;
            }
            set
            {
                this._max = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWarpRestrictionsLevel));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWarpRestrictionsLevel object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWarpRestrictionsLevel object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWarpRestrictionsLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWarpRestrictionsLevel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpRestrictionsLevel);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWarpRestrictionsLevel obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWarpRestrictionsLevel Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWarpRestrictionsLevel)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWarpRestrictionsLevel Deserialize(System.IO.Stream s)
        {
            return ((XmlWarpRestrictionsLevel)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWarpRestrictionsLevel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWarpRestrictionsLevel object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWarpRestrictionsLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWarpRestrictionsLevel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpRestrictionsLevel);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWarpRestrictionsLevel obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWarpRestrictionsLevel LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/HybrasylCommon")]
    [System.Xml.Serialization.XmlRootAttribute("WarpRestrictionsAB")]
    public partial class XmlWarpRestrictionsAB
    {

        private byte _min;

        private byte _max;

        private static XmlSerializer serializer;

        public XmlWarpRestrictionsAB()
        {
            this._min = ((byte)(0));
            this._max = ((byte)(255));
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "min")]
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "0")]
        public byte Min
        {
            get
            {
                return this._min;
            }
            set
            {
                this._min = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "max")]
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "255")]
        public byte Max
        {
            get
            {
                return this._max;
            }
            set
            {
                this._max = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlWarpRestrictionsAB));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlWarpRestrictionsAB object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlWarpRestrictionsAB object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlWarpRestrictionsAB object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlWarpRestrictionsAB obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpRestrictionsAB);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlWarpRestrictionsAB obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlWarpRestrictionsAB Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlWarpRestrictionsAB)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlWarpRestrictionsAB Deserialize(System.IO.Stream s)
        {
            return ((XmlWarpRestrictionsAB)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlWarpRestrictionsAB object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlWarpRestrictionsAB object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlWarpRestrictionsAB object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlWarpRestrictionsAB obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlWarpRestrictionsAB);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlWarpRestrictionsAB obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlWarpRestrictionsAB LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Npc")]
    public partial class XmlNpc
    {

        private bool _shouldSerializeJobs;

        private string _name;

        private string _displayname;

        private XmlNpcAppearance _appearance;

        private System.Nullable<NpcJobList> _jobs;

        private List<object> _inventory;

        private byte _x;

        private byte _y;

        private static XmlSerializer serializer;

        public XmlNpc()
        {
            this._inventory = new List<object>();
            this._appearance = new XmlNpcAppearance();
        }

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Name";
                Validator.ValidateProperty(value, validatorPropContext);
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("displayname")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Displayname
        {
            get
            {
                return this._displayname;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Displayname";
                Validator.ValidateProperty(value, validatorPropContext);
                this._displayname = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("appearance")]
        public XmlNpcAppearance Appearance
        {
            get
            {
                return this._appearance;
            }
            set
            {
                this._appearance = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("jobs")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(5)]
        public NpcJobList Jobs
        {
            get
            {
                if (this._jobs.HasValue)
                {
                    return this._jobs.Value;
                }
                else
                {
                    return default(NpcJobList);
                }
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Jobs";
                Validator.ValidateProperty(value, validatorPropContext);
                this._jobs = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JobsSpecified
        {
            get
            {
                return this._jobs.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._jobs = null;
                }
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("gold", typeof(byte), IsNullable = false, ElementName = "inventory")]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", typeof(XmlNpcItem), IsNullable = false)]
        public List<object> Inventory
        {
            get
            {
                return this._inventory;
            }
            set
            {
                this._inventory = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlNpc));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Inventory should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInventory()
        {
            return Inventory != null && Inventory.Count > 0;
        }

        /// <summary>
        /// Test whether Jobs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeJobs()
        {
            if (_shouldSerializeJobs)
            {
                return true;
            }
            return (_jobs != default(NpcJobList));
        }

        /// <summary>
        /// Test whether Appearance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAppearance()
        {
            return (_appearance != null);
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Displayname should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDisplayname()
        {
            return !string.IsNullOrEmpty(Displayname);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlNpc object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlNpc object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlNpc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlNpc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlNpc);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlNpc obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlNpc Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlNpc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlNpc Deserialize(System.IO.Stream s)
        {
            return ((XmlNpc)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlNpc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlNpc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlNpc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlNpc obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlNpc);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlNpc obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlNpc LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("NpcAppearance")]
    public partial class XmlNpcAppearance
    {

        private bool _shouldSerializeSprite;

        private ushort _sprite;

        private string _portrait;

        private byte _direction;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "sprite")]
        public ushort Sprite
        {
            get
            {
                return this._sprite;
            }
            set
            {
                this._sprite = value;
                _shouldSerializeSprite = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "portrait")]
        public string Portrait
        {
            get
            {
                return this._portrait;
            }
            set
            {
                this._portrait = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "direction")]
        public byte Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                this._direction = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlNpcAppearance));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Sprite should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSprite()
        {
            if (_shouldSerializeSprite)
            {
                return true;
            }
            return (_sprite != default(ushort));
        }

        /// <summary>
        /// Test whether Portrait should be serialized
        /// </summary>
        public virtual bool ShouldSerializePortrait()
        {
            return !string.IsNullOrEmpty(Portrait);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlNpcAppearance object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlNpcAppearance object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlNpcAppearance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlNpcAppearance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlNpcAppearance);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlNpcAppearance obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlNpcAppearance Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlNpcAppearance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlNpcAppearance Deserialize(System.IO.Stream s)
        {
            return ((XmlNpcAppearance)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlNpcAppearance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlNpcAppearance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlNpcAppearance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlNpcAppearance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlNpcAppearance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlNpcAppearance obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlNpcAppearance LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/HybrasylCommon")]
    [System.Xml.Serialization.XmlRootAttribute("NpcJobList")]
    public enum NpcJobList
    {

        /// <remarks/>
        vend = 1,

        /// <remarks/>
        bank = 2,

        /// <remarks/>
        train = 4,

        /// <remarks/>
        repair = 8,

        /// <remarks/>
        post = 16,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("NpcItem")]
    public partial class XmlNpcItem
    {

        private bool _shouldSerializeRefresh;

        private bool _shouldSerializeQuantity;

        private uint _quantity;

        private uint _refresh;

        private string _value;

        private static XmlSerializer serializer;

        public XmlNpcItem()
        {
            this._quantity = ((uint)(0));
            this._refresh = ((uint)(0));
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "quantity")]
        [System.ComponentModel.DefaultValueAttribute(typeof(uint), "0")]
        public uint Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                this._quantity = value;
                _shouldSerializeQuantity = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "refresh")]
        [System.ComponentModel.DefaultValueAttribute(typeof(uint), "0")]
        public uint Refresh
        {
            get
            {
                return this._refresh;
            }
            set
            {
                this._refresh = value;
                _shouldSerializeRefresh = true;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlNpcItem));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Quantity should be serialized
        /// </summary>
        public virtual bool ShouldSerializeQuantity()
        {
            if (_shouldSerializeQuantity)
            {
                return true;
            }
            return (_quantity != default(uint));
        }

        /// <summary>
        /// Test whether Refresh should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRefresh()
        {
            if (_shouldSerializeRefresh)
            {
                return true;
            }
            return (_refresh != default(uint));
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            return !string.IsNullOrEmpty(Value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlNpcItem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlNpcItem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlNpcItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlNpcItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlNpcItem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlNpcItem obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlNpcItem Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlNpcItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlNpcItem Deserialize(System.IO.Stream s)
        {
            return ((XmlNpcItem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlNpcItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlNpcItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlNpcItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlNpcItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlNpcItem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlNpcItem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlNpcItem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Signposts")]
    public partial class XmlSignposts
    {

        private List<object> _items;

        private static XmlSerializer serializer;

        public XmlSignposts()
        {
            this._items = new List<object>();
        }

        [System.Xml.Serialization.XmlElementAttribute("messageboard", typeof(XmlMessageboard))]
        [System.Xml.Serialization.XmlElementAttribute("signpost", typeof(XmlSignpost))]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlSignposts));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlSignposts object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlSignposts object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlSignposts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlSignposts obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSignposts);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlSignposts obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlSignposts Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlSignposts)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlSignposts Deserialize(System.IO.Stream s)
        {
            return ((XmlSignposts)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlSignposts object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlSignposts object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlSignposts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlSignposts obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSignposts);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlSignposts obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlSignposts LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Messageboard")]
    public partial class XmlMessageboard
    {

        private string _name;

        private string _description;

        private string _scriptname;

        private byte _x;

        private byte _y;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Name";
                Validator.ValidateProperty(value, validatorPropContext);
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(65534, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("scriptname")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Scriptname
        {
            get
            {
                return this._scriptname;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Scriptname";
                Validator.ValidateProperty(value, validatorPropContext);
                this._scriptname = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlMessageboard));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Scriptname should be serialized
        /// </summary>
        public virtual bool ShouldSerializeScriptname()
        {
            return !string.IsNullOrEmpty(Scriptname);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlMessageboard object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlMessageboard object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlMessageboard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlMessageboard obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlMessageboard);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlMessageboard obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlMessageboard Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlMessageboard)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlMessageboard Deserialize(System.IO.Stream s)
        {
            return ((XmlMessageboard)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlMessageboard object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlMessageboard object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlMessageboard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlMessageboard obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlMessageboard);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlMessageboard obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlMessageboard LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Signpost")]
    public partial class XmlSignpost
    {

        private string _message;

        private string _scriptname;

        private byte _x;

        private byte _y;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("message")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(65534, MinimumLength = 1)]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Message";
                Validator.ValidateProperty(value, validatorPropContext);
                this._message = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("scriptname")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Scriptname
        {
            get
            {
                return this._scriptname;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Scriptname";
                Validator.ValidateProperty(value, validatorPropContext);
                this._scriptname = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlSignpost));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Message should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMessage()
        {
            return !string.IsNullOrEmpty(Message);
        }

        /// <summary>
        /// Test whether Scriptname should be serialized
        /// </summary>
        public virtual bool ShouldSerializeScriptname()
        {
            return !string.IsNullOrEmpty(Scriptname);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlSignpost object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlSignpost object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlSignpost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlSignpost obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSignpost);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlSignpost obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlSignpost Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlSignpost)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlSignpost Deserialize(System.IO.Stream s)
        {
            return ((XmlSignpost)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlSignpost object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlSignpost object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlSignpost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlSignpost obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSignpost);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlSignpost obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlSignpost LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Spawn")]
    public partial class XmlSpawn
    {

        private string _name;

        private string _description;

        private string _strategy;

        private XmlSpawnModifiers _spawnModifiers;

        private string _interval;

        private string _checkInterval;

        private static XmlSerializer serializer;

        public XmlSpawn()
        {
            this._spawnModifiers = new XmlSpawnModifiers();
            this._strategy = "random";
        }

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Name";
                Validator.ValidateProperty(value, validatorPropContext);
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(65534, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.ComponentModel.DefaultValueAttribute("random")]
        [System.Xml.Serialization.XmlElementAttribute("strategy")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Strategy
        {
            get
            {
                return this._strategy;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Strategy";
                Validator.ValidateProperty(value, validatorPropContext);
                this._strategy = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("spawnModifiers")]
        public XmlSpawnModifiers SpawnModifiers
        {
            get
            {
                return this._spawnModifiers;
            }
            set
            {
                this._spawnModifiers = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger", AttributeName = "interval")]
        public string Interval
        {
            get
            {
                return this._interval;
            }
            set
            {
                this._interval = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger", AttributeName = "checkInterval")]
        public string CheckInterval
        {
            get
            {
                return this._checkInterval;
            }
            set
            {
                this._checkInterval = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlSpawn));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SpawnModifiers should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpawnModifiers()
        {
            return (_spawnModifiers != null);
        }

        /// <summary>
        /// Test whether Name should be serialized
        /// </summary>
        public virtual bool ShouldSerializeName()
        {
            return !string.IsNullOrEmpty(Name);
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Strategy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStrategy()
        {
            return !string.IsNullOrEmpty(Strategy);
        }

        /// <summary>
        /// Test whether Interval should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInterval()
        {
            return !string.IsNullOrEmpty(Interval);
        }

        /// <summary>
        /// Test whether CheckInterval should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCheckInterval()
        {
            return !string.IsNullOrEmpty(CheckInterval);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlSpawn object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlSpawn object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlSpawn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlSpawn obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawn);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlSpawn obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlSpawn Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlSpawn)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlSpawn Deserialize(System.IO.Stream s)
        {
            return ((XmlSpawn)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlSpawn object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlSpawn object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlSpawn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlSpawn obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawn);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlSpawn obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlSpawn LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("SpawnModifiers")]
    public partial class XmlSpawnModifiers
    {

        private bool _shouldSerializePassive;

        private bool _shouldSerializeSpeed;

        private System.Nullable<float> _speed;

        private object _passive;

        private XmlSpawnModifiersQuantity _quantity;

        private List<XmlSpawnModifiersZone> _zone;

        private static XmlSerializer serializer;

        public XmlSpawnModifiers()
        {
            this._zone = new List<XmlSpawnModifiersZone>();
            this._quantity = new XmlSpawnModifiersQuantity();
        }

        [System.Xml.Serialization.XmlElementAttribute("speed")]
        public float Speed
        {
            get
            {
                if (this._speed.HasValue)
                {
                    return this._speed.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._speed = value;
                _shouldSerializeSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpeedSpecified
        {
            get
            {
                return this._speed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._speed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("passive")]
        public object Passive
        {
            get
            {
                return this._passive;
            }
            set
            {
                this._passive = value;
                _shouldSerializePassive = true;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("quantity")]
        public XmlSpawnModifiersQuantity Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                this._quantity = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("zone", ElementName = "zone")]
        public List<XmlSpawnModifiersZone> Zone
        {
            get
            {
                return this._zone;
            }
            set
            {
                this._zone = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlSpawnModifiers));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Zone should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZone()
        {
            return Zone != null && Zone.Count > 0;
        }

        /// <summary>
        /// Test whether Speed should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpeed()
        {
            if (_shouldSerializeSpeed)
            {
                return true;
            }
            return (_speed != default(float));
        }

        /// <summary>
        /// Test whether Passive should be serialized
        /// </summary>
        public virtual bool ShouldSerializePassive()
        {
            if (_shouldSerializePassive)
            {
                return true;
            }
            return (_passive != default(object));
        }

        /// <summary>
        /// Test whether Quantity should be serialized
        /// </summary>
        public virtual bool ShouldSerializeQuantity()
        {
            return (_quantity != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlSpawnModifiers object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlSpawnModifiers object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlSpawnModifiers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlSpawnModifiers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawnModifiers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlSpawnModifiers obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlSpawnModifiers Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlSpawnModifiers)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlSpawnModifiers Deserialize(System.IO.Stream s)
        {
            return ((XmlSpawnModifiers)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlSpawnModifiers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlSpawnModifiers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlSpawnModifiers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlSpawnModifiers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawnModifiers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlSpawnModifiers obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlSpawnModifiers LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("SpawnModifiersQuantity")]
    public partial class XmlSpawnModifiersQuantity
    {

        private bool _shouldSerializePercentage;

        private string _min;

        private string _max;

        private System.Nullable<float> _percentage;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger", AttributeName = "min")]
        public string Min
        {
            get
            {
                return this._min;
            }
            set
            {
                this._min = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger", AttributeName = "max")]
        public string Max
        {
            get
            {
                return this._max;
            }
            set
            {
                this._max = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "percentage")]
        public float Percentage
        {
            get
            {
                if (this._percentage.HasValue)
                {
                    return this._percentage.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._percentage = value;
                _shouldSerializePercentage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PercentageSpecified
        {
            get
            {
                return this._percentage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._percentage = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlSpawnModifiersQuantity));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Percentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializePercentage()
        {
            if (_shouldSerializePercentage)
            {
                return true;
            }
            return (_percentage != default(float));
        }

        /// <summary>
        /// Test whether Min should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMin()
        {
            return !string.IsNullOrEmpty(Min);
        }

        /// <summary>
        /// Test whether Max should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMax()
        {
            return !string.IsNullOrEmpty(Max);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlSpawnModifiersQuantity object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlSpawnModifiersQuantity object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlSpawnModifiersQuantity object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlSpawnModifiersQuantity obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawnModifiersQuantity);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlSpawnModifiersQuantity obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlSpawnModifiersQuantity Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlSpawnModifiersQuantity)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlSpawnModifiersQuantity Deserialize(System.IO.Stream s)
        {
            return ((XmlSpawnModifiersQuantity)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlSpawnModifiersQuantity object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlSpawnModifiersQuantity object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlSpawnModifiersQuantity object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlSpawnModifiersQuantity obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawnModifiersQuantity);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlSpawnModifiersQuantity obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlSpawnModifiersQuantity LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("SpawnModifiersZone")]
    public partial class XmlSpawnModifiersZone
    {

        private string _start;

        private string _end;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "start")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{0,3},\\d{0,3}")]
        public string Start
        {
            get
            {
                return this._start;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Start";
                Validator.ValidateProperty(value, validatorPropContext);
                this._start = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "end")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{0,3},\\d{0,3}")]
        public string End
        {
            get
            {
                return this._end;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "End";
                Validator.ValidateProperty(value, validatorPropContext);
                this._end = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlSpawnModifiersZone));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Start should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStart()
        {
            return !string.IsNullOrEmpty(Start);
        }

        /// <summary>
        /// Test whether End should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEnd()
        {
            return !string.IsNullOrEmpty(End);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlSpawnModifiersZone object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlSpawnModifiersZone object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlSpawnModifiersZone object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlSpawnModifiersZone obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawnModifiersZone);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlSpawnModifiersZone obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlSpawnModifiersZone Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlSpawnModifiersZone)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlSpawnModifiersZone Deserialize(System.IO.Stream s)
        {
            return ((XmlSpawnModifiersZone)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlSpawnModifiersZone object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlSpawnModifiersZone object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlSpawnModifiersZone object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlSpawnModifiersZone obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlSpawnModifiersZone);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlSpawnModifiersZone obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlSpawnModifiersZone LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.hybrasyl.com/XML/Maps")]
    [System.Xml.Serialization.XmlRootAttribute("Reactor")]
    public partial class XmlReactor
    {

        private bool _shouldSerializeBlocking;

        private string _description;

        private string _scriptname;

        private byte _x;

        private byte _y;

        private bool _blocking;

        private static XmlSerializer serializer;

        public XmlReactor()
        {
            this._blocking = false;
        }

        [System.Xml.Serialization.XmlElementAttribute("description")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(65534, MinimumLength = 1)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Description";
                Validator.ValidateProperty(value, validatorPropContext);
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("scriptname")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(255, MinimumLength = 1)]
        public string Scriptname
        {
            get
            {
                return this._scriptname;
            }
            set
            {
                System.ComponentModel.DataAnnotations.ValidationContext validatorPropContext = new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null);
                validatorPropContext.MemberName = "Scriptname";
                Validator.ValidateProperty(value, validatorPropContext);
                this._scriptname = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "x")]
        public byte X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "y")]
        public byte Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "blocking")]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool Blocking
        {
            get
            {
                return this._blocking;
            }
            set
            {
                this._blocking = value;
                _shouldSerializeBlocking = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(XmlReactor));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Blocking should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBlocking()
        {
            if (_shouldSerializeBlocking)
            {
                return true;
            }
            return (_blocking != default(bool));
        }

        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }

        /// <summary>
        /// Test whether Scriptname should be serialized
        /// </summary>
        public virtual bool ShouldSerializeScriptname()
        {
            return !string.IsNullOrEmpty(Scriptname);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current XmlReactor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an XmlReactor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output XmlReactor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out XmlReactor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlReactor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out XmlReactor obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static XmlReactor Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((XmlReactor)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static XmlReactor Deserialize(System.IO.Stream s)
        {
            return ((XmlReactor)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current XmlReactor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an XmlReactor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output XmlReactor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out XmlReactor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(XmlReactor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out XmlReactor obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static XmlReactor LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
